diff --git a/config_orch_core/controller/main_controller.py b/config_orch_core/controller/main_controller.py
index c3ab931..4c80cac 100644
--- a/config_orch_core/controller/main_controller.py
+++ b/config_orch_core/controller/main_controller.py
@@ -6,6 +6,7 @@ from config_orch_core.exception.functional_capability_not_found import Functiona
 from config_orch_core.exception.vnf_not_started import VnfNotStarted
 from config_orch_core.exception.management_address_not_found import ManagementAddressNotFound
 from requests.exceptions import HTTPError
+import logging
 
 class MainController():
 
@@ -36,18 +37,23 @@ class MainController():
         try:
             return self.datadiskService.get_file(tenant_id, graph_id, vnf_id, filename)
         except FileNotFound as err:
+            logging.error(err)
             raise err
         except Exception as err:
+            logging.error(err)
             raise err
 
     def retrieve_file_default(self, functional_capability, filename):
         try:
             return self.datadiskService.get_file_default(functional_capability, filename)
         except FunctionalCapabilityNotFound as err:
+            logging.error(err)
             raise err
         except FileNotFound as err:
+            logging.error(err)
             raise err
         except Exception as err:
+            logging.error(err)
             raise err
 
     def get_config(self, tenant_id, graph_id, vnf_id, url):
@@ -72,6 +78,7 @@ class MainController():
             raise ex
 
     def put_config(self, tenant_id, graph_id, vnf_id, url, data):
+        logging.debug("Put config a %s/%s/%s  : %s" %(tenant_id,graph_id,vnf_id,data))
         if not self.vnfService.is_vnf_started(tenant_id, graph_id, vnf_id):
             raise VnfNotStarted("Vnf is not started")
         address = self.vnfService.get_management_address(tenant_id, graph_id, vnf_id)
diff --git a/config_orch_core/controller/message_bus_controller.py b/config_orch_core/controller/message_bus_controller.py
index a2c0531..ce99ffe 100644
--- a/config_orch_core/controller/message_bus_controller.py
+++ b/config_orch_core/controller/message_bus_controller.py
@@ -1,11 +1,11 @@
 import json
-import logging
 from threading import Event
 
 from config_orch_core.config import Configuration
 from config_orch_core.dd_client import DDclient
 from config_orch_core.service.vnf_service import VnfService
 
+import logging
 
 class MessageBusController():
 
@@ -91,11 +91,16 @@ class MessageBusController():
         try:
             if self.vnfService.is_vnf_started(tenant_id, graph_id, vnf_id):
                 address = self.vnfService.get_management_address(tenant_id, graph_id, vnf_id)
-                if address is None:
-                    self.vnfService.save_management_address(tenant_id, graph_id, vnf_id, msg)
-                    logging.debug("Saved management address: " + msg + " of: " + tenant_id+'.'+graph_id+'.'+vnf_id )
+#                if address is None:
+#                    self.vnfService.save_management_address(tenant_id, graph_id, vnf_id, msg)
+#                    logging.debug("Saved management address: " + msg + " of: " + tenant_id+'.'+graph_id+'.'+vnf_id )
+                self.vnfService.save_management_address(tenant_id, graph_id, vnf_id, msg)
+                logging.debug("Saved management address: " + msg + " of: " + tenant_id+'.'+graph_id+'.'+vnf_id )
             else:
                 logging.error("Recevied a management address from a vnf not known:")
                 logging.error("Address: " + topic[1] + " From: tenant_id: " + tenant_id + ", graph_id: " + graph_id + ", vnf_id: " + vnf_id)
+        except Exception as err:
+            print(err)
+            logging.error(err)
         except IOError as err:
-            logging.error(err)
\ No newline at end of file
+            logging.error(err)
diff --git a/config_orch_core/repository/datadisk_repo.py b/config_orch_core/repository/datadisk_repo.py
index 8dd09d2..642a74d 100644
--- a/config_orch_core/repository/datadisk_repo.py
+++ b/config_orch_core/repository/datadisk_repo.py
@@ -7,7 +7,7 @@ local_db_path = "local_database"
 class DatadiskRepo():
 
     def get_file_list(self, functional_capability):
-        supported_functional_capabilities = ['nat', 'firewall', 'dhcp']
+        supported_functional_capabilities = ['nat', 'firewall', 'dhcp', 'transcoder']
         if functional_capability not in supported_functional_capabilities:
             raise FunctionalCapabilityNotFound("Functional capability " + functional_capability + " unsupported")
         else:
@@ -21,9 +21,11 @@ class DatadiskRepo():
 
 
     def get_initial_configuration_path(self, tenant_id, graph_id, vnf_id):
+#        return local_db_path+'/metadata/nat_initial_config.json'
         raise FileNotFound("initial_configuration.json not found for: " + tenant_id +'/'+ graph_id +'/'+ vnf_id)
 
     def get_template_path(self, tenant_id, graph_id, vnf_id):
+#        return local_db_path+'/metadata/nat_template.json'
         raise FileNotFound("templates.json not found for: " + tenant_id + '/' + graph_id + '/' + vnf_id)
 
     def get_metadata_path(self, tenant_id, graph_id, vnf_id, broker_address):
@@ -35,7 +37,7 @@ class DatadiskRepo():
         file.write('"tenant-id": "' + tenant_id + '",\n')
         file.write('"graph-id": "' + graph_id + '",\n')
         file.write('"vnf-id": "' + vnf_id + '",\n')
-        file.write('"broker-url": "tcp://10.0.0.2:5555"')
+        file.write('"broker-url": "tcp://192.168.40.1:5555"')
         #file.write('"broker-url: "' + broker_address)
         file.write("}")
 
@@ -57,6 +59,9 @@ class DatadiskRepo():
 
         elif (functional_capability == "nat"):
             return local_db_path+"/initial_configuration/NAT_initial_configuration.json"
+
+        elif (functional_capability == "transcoder"):
+            return local_db_path+"/initial_configuration/TRANSCODER_initial_configuration.json"
         else:
             raise FunctionalCapabilityNotFound("Functional capability " + functional_capability + " unknown")
 
@@ -70,5 +75,8 @@ class DatadiskRepo():
 
         elif (functional_capability == "nat"):
             return local_db_path+"/templates/NAT_template.json"
+
+        elif (functional_capability == "transcoder"):
+            return local_db_path+"/templates/TRANSCODER_template.json"
         else:
-            raise FunctionalCapabilityNotFound("Functional capability " + functional_capability + " unknown")
\ No newline at end of file
+            raise FunctionalCapabilityNotFound("Functional capability " + functional_capability + " unknown")
diff --git a/config_orch_core/repository/vnf_repo.py b/config_orch_core/repository/vnf_repo.py
index a240314..52ff085 100644
--- a/config_orch_core/repository/vnf_repo.py
+++ b/config_orch_core/repository/vnf_repo.py
@@ -1,6 +1,6 @@
 from config_orch_core.model.vnf import VNF
 import fileinput
-
+import logging
 database = "my_db.txt"
 
 class VnfRepo():
@@ -49,11 +49,17 @@ class VnfRepo():
 
     def save_management_address(self, vnf, address):
         try:
+            old_management = self.get_management_address(vnf)
             for line in fileinput.input(database, inplace=1):
-                old_row = vnf.tenant_id+':'+vnf.graph_id+':'+vnf.vnf_id
+                if ( old_management is None ):
+                    old_row = vnf.tenant_id+':'+vnf.graph_id+':'+vnf.vnf_id
+                else:
+                    old_row = vnf.tenant_id+':'+vnf.graph_id+':'+vnf.vnf_id+'#'+old_management
                 new_row = vnf.tenant_id+':'+vnf.graph_id+':'+vnf.vnf_id+'#'+address
                 print(line.replace(old_row, new_row))
-        except Exception:
+        except Exception as e:
+            logging.error("Error during update of management address")
+            logging.error(e)
             raise Exception
 
     def get_management_address(self, vnf):
diff --git a/config_orch_core/rest_api/resources/config.py b/config_orch_core/rest_api/resources/config.py
index f1dd47f..50e15bc 100644
--- a/config_orch_core/rest_api/resources/config.py
+++ b/config_orch_core/rest_api/resources/config.py
@@ -61,6 +61,7 @@ class Configuration(Resource):
             url = ''
         mainController = MainController()
         try:
+            logging.debug("Dati %s/%s/%s : %s" % (tenant_id,graph_id,vnf_id,request.data.decode()))
             return mainController.put_config(tenant_id, graph_id, vnf_id, url, request.data.decode())
 
         except VnfNotStarted as err:
@@ -86,6 +87,7 @@ class FileByFunctionalCapability(Resource):
                 return Response(json_data, status=200, mimetype="application/json")
             else:
                 filepath = mainController.retrieve_file_default(functional_capability, filename)
+                print(filepath)
                 return send_from_directory('', filepath)
 
         except FunctionalCapabilityNotFound as err:
@@ -104,11 +106,14 @@ class FileByTriple(Resource):
         mainController = MainController()
         try:
             filepath = mainController.retrieve_file(tenant_id, graph_id, vnf_id, filename)
+            logging.debug("Request: %s/%s/%s/%s -> %s" % ( tenant_id, graph_id, vnf_id, filename , filepath) )
             return send_from_directory('', filepath)
 
         except FileNotFound as err:
+            logging.error(err)
             return Response(json.dumps(err.get_mess()), status=404, mimetype="application/json")
         except Exception as err:
+            logging.error(err)
             return Response(json.dumps(str(err)), status=500, mimetype="application/json")
 
 
diff --git a/config_orch_core/service/configuration_service.py b/config_orch_core/service/configuration_service.py
index 2f9f822..b1d9e71 100644
--- a/config_orch_core/service/configuration_service.py
+++ b/config_orch_core/service/configuration_service.py
@@ -18,6 +18,7 @@ class ConfigurationService():
     def post(self, url, data):
         headers = {'Content-type': 'application/json'}
         try:
+            logging.debug("Invio a %s questi dati %s" %(url,data))
             resp = requests.post(url, data=data, headers=headers)
             resp.raise_for_status()
             return resp.text
@@ -29,6 +30,7 @@ class ConfigurationService():
     def put(self, url, data):
         headers = {'Content-type': 'application/json'}
         try:
+            logging.debug("Invio a %s questi dati %s" %(url,data))
             resp = requests.put(url, data=data, headers=headers)
             resp.raise_for_status()
             return resp.text
@@ -46,4 +48,4 @@ class ConfigurationService():
         except HTTPError as err:
             raise err
         except Exception as ex:
-            raise ex
\ No newline at end of file
+            raise ex
diff --git a/config_orch_core/service/datadisk_service.py b/config_orch_core/service/datadisk_service.py
index 5f162ec..8e85ead 100644
--- a/config_orch_core/service/datadisk_service.py
+++ b/config_orch_core/service/datadisk_service.py
@@ -2,6 +2,7 @@ from config_orch_core.config import Configuration
 from config_orch_core.repository.datadisk_repo import DatadiskRepo
 from config_orch_core.exception.file_not_found import FileNotFound
 from config_orch_core.exception.functional_capability_not_found import FunctionalCapabilityNotFound
+import logging
 
 class DatadiskService():
 
@@ -34,6 +35,7 @@ class DatadiskService():
                 raise FileNotFound("File: " + filename + " not found")
 
         except FileNotFound as err:
+            logging.error("Errore %s" % err)
             raise err
 
     def get_file_default(self, functional_capability, filename):
@@ -49,4 +51,5 @@ class DatadiskService():
                 raise FileNotFound("File: " + filename + " not found")
 
         except FunctionalCapabilityNotFound as err:
-            raise err
\ No newline at end of file
+            logging.error("Errore %s" % err)
+            raise err
diff --git a/.gitignore b/.gitignore
index 7bbc71c..1ba1ab5 100644
--- a/.gitignore
+++ b/.gitignore
@@ -99,3 +99,5 @@ ENV/
 
 # mypy
 .mypy_cache/
+
+local_database/
diff --git a/ConfigurationService.patch b/ConfigurationService.patch
new file mode 100644
index 0000000..02074bd
--- /dev/null
+++ b/ConfigurationService.patch
@@ -0,0 +1,260 @@
+diff --git a/config_orch_core/controller/main_controller.py b/config_orch_core/controller/main_controller.py
+index c3ab931..4c80cac 100644
+--- a/config_orch_core/controller/main_controller.py
++++ b/config_orch_core/controller/main_controller.py
+@@ -6,6 +6,7 @@ from config_orch_core.exception.functional_capability_not_found import Functiona
+ from config_orch_core.exception.vnf_not_started import VnfNotStarted
+ from config_orch_core.exception.management_address_not_found import ManagementAddressNotFound
+ from requests.exceptions import HTTPError
++import logging
+ 
+ class MainController():
+ 
+@@ -36,18 +37,23 @@ class MainController():
+         try:
+             return self.datadiskService.get_file(tenant_id, graph_id, vnf_id, filename)
+         except FileNotFound as err:
++            logging.error(err)
+             raise err
+         except Exception as err:
++            logging.error(err)
+             raise err
+ 
+     def retrieve_file_default(self, functional_capability, filename):
+         try:
+             return self.datadiskService.get_file_default(functional_capability, filename)
+         except FunctionalCapabilityNotFound as err:
++            logging.error(err)
+             raise err
+         except FileNotFound as err:
++            logging.error(err)
+             raise err
+         except Exception as err:
++            logging.error(err)
+             raise err
+ 
+     def get_config(self, tenant_id, graph_id, vnf_id, url):
+@@ -72,6 +78,7 @@ class MainController():
+             raise ex
+ 
+     def put_config(self, tenant_id, graph_id, vnf_id, url, data):
++        logging.debug("Put config a %s/%s/%s  : %s" %(tenant_id,graph_id,vnf_id,data))
+         if not self.vnfService.is_vnf_started(tenant_id, graph_id, vnf_id):
+             raise VnfNotStarted("Vnf is not started")
+         address = self.vnfService.get_management_address(tenant_id, graph_id, vnf_id)
+diff --git a/config_orch_core/controller/message_bus_controller.py b/config_orch_core/controller/message_bus_controller.py
+index a2c0531..ce99ffe 100644
+--- a/config_orch_core/controller/message_bus_controller.py
++++ b/config_orch_core/controller/message_bus_controller.py
+@@ -1,11 +1,11 @@
+ import json
+-import logging
+ from threading import Event
+ 
+ from config_orch_core.config import Configuration
+ from config_orch_core.dd_client import DDclient
+ from config_orch_core.service.vnf_service import VnfService
+ 
++import logging
+ 
+ class MessageBusController():
+ 
+@@ -91,11 +91,16 @@ class MessageBusController():
+         try:
+             if self.vnfService.is_vnf_started(tenant_id, graph_id, vnf_id):
+                 address = self.vnfService.get_management_address(tenant_id, graph_id, vnf_id)
+-                if address is None:
+-                    self.vnfService.save_management_address(tenant_id, graph_id, vnf_id, msg)
+-                    logging.debug("Saved management address: " + msg + " of: " + tenant_id+'.'+graph_id+'.'+vnf_id )
++#                if address is None:
++#                    self.vnfService.save_management_address(tenant_id, graph_id, vnf_id, msg)
++#                    logging.debug("Saved management address: " + msg + " of: " + tenant_id+'.'+graph_id+'.'+vnf_id )
++                self.vnfService.save_management_address(tenant_id, graph_id, vnf_id, msg)
++                logging.debug("Saved management address: " + msg + " of: " + tenant_id+'.'+graph_id+'.'+vnf_id )
+             else:
+                 logging.error("Recevied a management address from a vnf not known:")
+                 logging.error("Address: " + topic[1] + " From: tenant_id: " + tenant_id + ", graph_id: " + graph_id + ", vnf_id: " + vnf_id)
++        except Exception as err:
++            print(err)
++            logging.error(err)
+         except IOError as err:
+-            logging.error(err)
+\ No newline at end of file
++            logging.error(err)
+diff --git a/config_orch_core/repository/datadisk_repo.py b/config_orch_core/repository/datadisk_repo.py
+index 8dd09d2..642a74d 100644
+--- a/config_orch_core/repository/datadisk_repo.py
++++ b/config_orch_core/repository/datadisk_repo.py
+@@ -7,7 +7,7 @@ local_db_path = "local_database"
+ class DatadiskRepo():
+ 
+     def get_file_list(self, functional_capability):
+-        supported_functional_capabilities = ['nat', 'firewall', 'dhcp']
++        supported_functional_capabilities = ['nat', 'firewall', 'dhcp', 'transcoder']
+         if functional_capability not in supported_functional_capabilities:
+             raise FunctionalCapabilityNotFound("Functional capability " + functional_capability + " unsupported")
+         else:
+@@ -21,9 +21,11 @@ class DatadiskRepo():
+ 
+ 
+     def get_initial_configuration_path(self, tenant_id, graph_id, vnf_id):
++#        return local_db_path+'/metadata/nat_initial_config.json'
+         raise FileNotFound("initial_configuration.json not found for: " + tenant_id +'/'+ graph_id +'/'+ vnf_id)
+ 
+     def get_template_path(self, tenant_id, graph_id, vnf_id):
++#        return local_db_path+'/metadata/nat_template.json'
+         raise FileNotFound("templates.json not found for: " + tenant_id + '/' + graph_id + '/' + vnf_id)
+ 
+     def get_metadata_path(self, tenant_id, graph_id, vnf_id, broker_address):
+@@ -35,7 +37,7 @@ class DatadiskRepo():
+         file.write('"tenant-id": "' + tenant_id + '",\n')
+         file.write('"graph-id": "' + graph_id + '",\n')
+         file.write('"vnf-id": "' + vnf_id + '",\n')
+-        file.write('"broker-url": "tcp://10.0.0.2:5555"')
++        file.write('"broker-url": "tcp://192.168.40.1:5555"')
+         #file.write('"broker-url: "' + broker_address)
+         file.write("}")
+ 
+@@ -57,6 +59,9 @@ class DatadiskRepo():
+ 
+         elif (functional_capability == "nat"):
+             return local_db_path+"/initial_configuration/NAT_initial_configuration.json"
++
++        elif (functional_capability == "transcoder"):
++            return local_db_path+"/initial_configuration/TRANSCODER_initial_configuration.json"
+         else:
+             raise FunctionalCapabilityNotFound("Functional capability " + functional_capability + " unknown")
+ 
+@@ -70,5 +75,8 @@ class DatadiskRepo():
+ 
+         elif (functional_capability == "nat"):
+             return local_db_path+"/templates/NAT_template.json"
++
++        elif (functional_capability == "transcoder"):
++            return local_db_path+"/templates/TRANSCODER_template.json"
+         else:
+-            raise FunctionalCapabilityNotFound("Functional capability " + functional_capability + " unknown")
+\ No newline at end of file
++            raise FunctionalCapabilityNotFound("Functional capability " + functional_capability + " unknown")
+diff --git a/config_orch_core/repository/vnf_repo.py b/config_orch_core/repository/vnf_repo.py
+index a240314..52ff085 100644
+--- a/config_orch_core/repository/vnf_repo.py
++++ b/config_orch_core/repository/vnf_repo.py
+@@ -1,6 +1,6 @@
+ from config_orch_core.model.vnf import VNF
+ import fileinput
+-
++import logging
+ database = "my_db.txt"
+ 
+ class VnfRepo():
+@@ -49,11 +49,17 @@ class VnfRepo():
+ 
+     def save_management_address(self, vnf, address):
+         try:
++            old_management = self.get_management_address(vnf)
+             for line in fileinput.input(database, inplace=1):
+-                old_row = vnf.tenant_id+':'+vnf.graph_id+':'+vnf.vnf_id
++                if ( old_management is None ):
++                    old_row = vnf.tenant_id+':'+vnf.graph_id+':'+vnf.vnf_id
++                else:
++                    old_row = vnf.tenant_id+':'+vnf.graph_id+':'+vnf.vnf_id+'#'+old_management
+                 new_row = vnf.tenant_id+':'+vnf.graph_id+':'+vnf.vnf_id+'#'+address
+                 print(line.replace(old_row, new_row))
+-        except Exception:
++        except Exception as e:
++            logging.error("Error during update of management address")
++            logging.error(e)
+             raise Exception
+ 
+     def get_management_address(self, vnf):
+diff --git a/config_orch_core/rest_api/resources/config.py b/config_orch_core/rest_api/resources/config.py
+index f1dd47f..50e15bc 100644
+--- a/config_orch_core/rest_api/resources/config.py
++++ b/config_orch_core/rest_api/resources/config.py
+@@ -61,6 +61,7 @@ class Configuration(Resource):
+             url = ''
+         mainController = MainController()
+         try:
++            logging.debug("Dati %s/%s/%s : %s" % (tenant_id,graph_id,vnf_id,request.data.decode()))
+             return mainController.put_config(tenant_id, graph_id, vnf_id, url, request.data.decode())
+ 
+         except VnfNotStarted as err:
+@@ -86,6 +87,7 @@ class FileByFunctionalCapability(Resource):
+                 return Response(json_data, status=200, mimetype="application/json")
+             else:
+                 filepath = mainController.retrieve_file_default(functional_capability, filename)
++                print(filepath)
+                 return send_from_directory('', filepath)
+ 
+         except FunctionalCapabilityNotFound as err:
+@@ -104,11 +106,14 @@ class FileByTriple(Resource):
+         mainController = MainController()
+         try:
+             filepath = mainController.retrieve_file(tenant_id, graph_id, vnf_id, filename)
++            logging.debug("Request: %s/%s/%s/%s -> %s" % ( tenant_id, graph_id, vnf_id, filename , filepath) )
+             return send_from_directory('', filepath)
+ 
+         except FileNotFound as err:
++            logging.error(err)
+             return Response(json.dumps(err.get_mess()), status=404, mimetype="application/json")
+         except Exception as err:
++            logging.error(err)
+             return Response(json.dumps(str(err)), status=500, mimetype="application/json")
+ 
+ 
+diff --git a/config_orch_core/service/configuration_service.py b/config_orch_core/service/configuration_service.py
+index 2f9f822..b1d9e71 100644
+--- a/config_orch_core/service/configuration_service.py
++++ b/config_orch_core/service/configuration_service.py
+@@ -18,6 +18,7 @@ class ConfigurationService():
+     def post(self, url, data):
+         headers = {'Content-type': 'application/json'}
+         try:
++            logging.debug("Invio a %s questi dati %s" %(url,data))
+             resp = requests.post(url, data=data, headers=headers)
+             resp.raise_for_status()
+             return resp.text
+@@ -29,6 +30,7 @@ class ConfigurationService():
+     def put(self, url, data):
+         headers = {'Content-type': 'application/json'}
+         try:
++            logging.debug("Invio a %s questi dati %s" %(url,data))
+             resp = requests.put(url, data=data, headers=headers)
+             resp.raise_for_status()
+             return resp.text
+@@ -46,4 +48,4 @@ class ConfigurationService():
+         except HTTPError as err:
+             raise err
+         except Exception as ex:
+-            raise ex
+\ No newline at end of file
++            raise ex
+diff --git a/config_orch_core/service/datadisk_service.py b/config_orch_core/service/datadisk_service.py
+index 5f162ec..8e85ead 100644
+--- a/config_orch_core/service/datadisk_service.py
++++ b/config_orch_core/service/datadisk_service.py
+@@ -2,6 +2,7 @@ from config_orch_core.config import Configuration
+ from config_orch_core.repository.datadisk_repo import DatadiskRepo
+ from config_orch_core.exception.file_not_found import FileNotFound
+ from config_orch_core.exception.functional_capability_not_found import FunctionalCapabilityNotFound
++import logging
+ 
+ class DatadiskService():
+ 
+@@ -34,6 +35,7 @@ class DatadiskService():
+                 raise FileNotFound("File: " + filename + " not found")
+ 
+         except FileNotFound as err:
++            logging.error("Errore %s" % err)
+             raise err
+ 
+     def get_file_default(self, functional_capability, filename):
+@@ -49,4 +51,5 @@ class DatadiskService():
+                 raise FileNotFound("File: " + filename + " not found")
+ 
+         except FunctionalCapabilityNotFound as err:
+-            raise err
+\ No newline at end of file
++            logging.error("Errore %s" % err)
++            raise err
diff --git a/broker-keys.json b/broker-keys.json
new file mode 100644
index 0000000..62680df
--- /dev/null
+++ b/broker-keys.json
@@ -0,0 +1,12 @@
+{
+    "dd": {
+        "pubkey": "8u2Rj2UnvxG/+8iB3eZK9IIktWIQbZTQnXRXgvWAn3s=",
+        "privkey": "6ONGAaiFgTU/u7h7kSBZkAYmVQwmTmDSCQltXJXFQUQ=",
+        "R": "16590672225689067854"
+    },
+    "47ca70735896b6e6ba40d8df3b1912493bbb5ad0463dd0495102405e758f1661": {
+        "r": "public",
+        "pubkey": "R8pwc1iWtua6QNjfOxkSSTu7WtBGPdBJUQJAXnWPFmE=",
+        "R": "2021018521089042212"
+    }
+}
\ No newline at end of file
diff --git a/config/a-keys.json b/config/a-keys.json
new file mode 100644
index 0000000..a42959b
--- /dev/null
+++ b/config/a-keys.json
@@ -0,0 +1,7 @@
+{
+    "publicpubkey": "aCbUXU7y473XF1w6sktgnVDpGNRukue0KtmQaEL+EWQ=",
+    "hash": "ebaf78884c78effbf8a097d0a7f792c836e340adf0c6d442bb8e4de8c7a9d94d",
+    "pubkey": "6694iEx47/v4oJfQp/eSyDbjQK3wxtRCu45N6Mep2U0=",
+    "ddpubkey": "SpbAzS7V1yln0fQZT1a5PlzbraDRY0IRJ5AgBTcDVVs=",
+    "privkey": "/eivLDH1tLvNySdm8kGF8PnBxTtwxEeQEv6q7BDb9Ks="
+}
\ No newline at end of file
diff --git a/config/b-keys.json b/config/b-keys.json
new file mode 100644
index 0000000..94812b2
--- /dev/null
+++ b/config/b-keys.json
@@ -0,0 +1,7 @@
+{
+    "publicpubkey": "aCbUXU7y473XF1w6sktgnVDpGNRukue0KtmQaEL+EWQ=",
+    "hash": "1a7b86fcb0749a9f720cf39ebabda75e62e4a3ad4680b43c8546a29321b7012d",
+    "pubkey": "GnuG/LB0mp9yDPOeur2nXmLko61GgLQ8hUaikyG3AS0=",
+    "ddpubkey": "SpbAzS7V1yln0fQZT1a5PlzbraDRY0IRJ5AgBTcDVVs=",
+    "privkey": "bYGCB7dzHmFl6inCEv+mo94Oi5BEvBZRVg096aWa2Cg="
+}
\ No newline at end of file
diff --git a/config/broker-keys.json b/config/broker-keys.json
new file mode 100644
index 0000000..c78166f
--- /dev/null
+++ b/config/broker-keys.json
@@ -0,0 +1,27 @@
+{
+    "ebaf78884c78effbf8a097d0a7f792c836e340adf0c6d442bb8e4de8c7a9d94d": {
+        "pubkey": "6694iEx47/v4oJfQp/eSyDbjQK3wxtRCu45N6Mep2U0=",
+        "R": "93159644113719761",
+        "r": "a"
+    },
+    "6826d45d4ef2e3bdd7175c3ab24b609d50e918d46e92e7b42ad9906842fe1164": {
+        "pubkey": "aCbUXU7y473XF1w6sktgnVDpGNRukue0KtmQaEL+EWQ=",
+        "R": "3365870857414572081",
+        "r": "public"
+    },
+    "1a7b86fcb0749a9f720cf39ebabda75e62e4a3ad4680b43c8546a29321b7012d": {
+        "pubkey": "GnuG/LB0mp9yDPOeur2nXmLko61GgLQ8hUaikyG3AS0=",
+        "R": "9019568927667383903",
+        "r": "b"
+    },
+    "8413a5fa294b3f4a2f47c4a6cf9cd47c62c6235b1e36562a232ea6edbc2a5060": {
+        "pubkey": "hBOl+ilLP0ovR8Smz5zUfGLGI1seNlYqIy6m7bwqUGA=",
+        "R": "8386166393541733048",
+        "r": "c"
+    },
+    "dd": {
+        "pubkey": "SpbAzS7V1yln0fQZT1a5PlzbraDRY0IRJ5AgBTcDVVs=",
+        "privkey": "edioj6PUp/29e2sr7Uw33/DkL99rTtsYW93nnF2kHqo=",
+        "R": "15455106812178565449"
+    }
+}
\ No newline at end of file
diff --git a/config/c-keys.json b/config/c-keys.json
new file mode 100644
index 0000000..3dc2534
--- /dev/null
+++ b/config/c-keys.json
@@ -0,0 +1,7 @@
+{
+    "publicpubkey": "aCbUXU7y473XF1w6sktgnVDpGNRukue0KtmQaEL+EWQ=",
+    "hash": "8413a5fa294b3f4a2f47c4a6cf9cd47c62c6235b1e36562a232ea6edbc2a5060",
+    "pubkey": "hBOl+ilLP0ovR8Smz5zUfGLGI1seNlYqIy6m7bwqUGA=",
+    "ddpubkey": "SpbAzS7V1yln0fQZT1a5PlzbraDRY0IRJ5AgBTcDVVs=",
+    "privkey": "jkjCe+jpyazugZHiHrdk6irlh+qNSv1VTy+wJks01QQ="
+}
\ No newline at end of file
diff --git a/config/default-config.ini b/config/default-config.ini
index e3e7e01..f027328 100644
--- a/config/default-config.ini
+++ b/config/default-config.ini
@@ -1,6 +1,6 @@
 [logging]
 # Comment 'log_file' if you want the log on the console
-#log_file = logging.log
+log_file = logging.log
 #Log level (INFO, DEBUG, WARNING)
 log_level = DEBUG
 
diff --git a/config/public-keys.json b/config/public-keys.json
new file mode 100644
index 0000000..e2a62d5
--- /dev/null
+++ b/config/public-keys.json
@@ -0,0 +1,22 @@
+{
+    "ebaf78884c78effbf8a097d0a7f792c836e340adf0c6d442bb8e4de8c7a9d94d": {
+        "pubkey": "6694iEx47/v4oJfQp/eSyDbjQK3wxtRCu45N6Mep2U0=",
+        "r": "a"
+    },
+    "public": {
+        "publicpubkey": "aCbUXU7y473XF1w6sktgnVDpGNRukue0KtmQaEL+EWQ=",
+        "hash": "6826d45d4ef2e3bdd7175c3ab24b609d50e918d46e92e7b42ad9906842fe1164",
+        "pubkey": "aCbUXU7y473XF1w6sktgnVDpGNRukue0KtmQaEL+EWQ=",
+        "ddpubkey": "SpbAzS7V1yln0fQZT1a5PlzbraDRY0IRJ5AgBTcDVVs=",
+        "privkey": "JsQXZVlhLfxhpP3bigoLHThXmXId5lcaBEymZQ4hMI0=",
+        "name": "public"
+    },
+    "1a7b86fcb0749a9f720cf39ebabda75e62e4a3ad4680b43c8546a29321b7012d": {
+        "pubkey": "GnuG/LB0mp9yDPOeur2nXmLko61GgLQ8hUaikyG3AS0=",
+        "r": "b"
+    },
+    "8413a5fa294b3f4a2f47c4a6cf9cd47c62c6235b1e36562a232ea6edbc2a5060": {
+        "pubkey": "hBOl+ilLP0ovR8Smz5zUfGLGI1seNlYqIy6m7bwqUGA=",
+        "r": "c"
+    }
+}
\ No newline at end of file
diff --git a/config_orch_core/controller/main_controller.py b/config_orch_core/controller/main_controller.py
index c3ab931..4c80cac 100644
--- a/config_orch_core/controller/main_controller.py
+++ b/config_orch_core/controller/main_controller.py
@@ -6,6 +6,7 @@ from config_orch_core.exception.functional_capability_not_found import Functiona
 from config_orch_core.exception.vnf_not_started import VnfNotStarted
 from config_orch_core.exception.management_address_not_found import ManagementAddressNotFound
 from requests.exceptions import HTTPError
+import logging
 
 class MainController():
 
@@ -36,18 +37,23 @@ class MainController():
         try:
             return self.datadiskService.get_file(tenant_id, graph_id, vnf_id, filename)
         except FileNotFound as err:
+            logging.error(err)
             raise err
         except Exception as err:
+            logging.error(err)
             raise err
 
     def retrieve_file_default(self, functional_capability, filename):
         try:
             return self.datadiskService.get_file_default(functional_capability, filename)
         except FunctionalCapabilityNotFound as err:
+            logging.error(err)
             raise err
         except FileNotFound as err:
+            logging.error(err)
             raise err
         except Exception as err:
+            logging.error(err)
             raise err
 
     def get_config(self, tenant_id, graph_id, vnf_id, url):
@@ -72,6 +78,7 @@ class MainController():
             raise ex
 
     def put_config(self, tenant_id, graph_id, vnf_id, url, data):
+        logging.debug("Put config a %s/%s/%s  : %s" %(tenant_id,graph_id,vnf_id,data))
         if not self.vnfService.is_vnf_started(tenant_id, graph_id, vnf_id):
             raise VnfNotStarted("Vnf is not started")
         address = self.vnfService.get_management_address(tenant_id, graph_id, vnf_id)
diff --git a/config_orch_core/controller/message_bus_controller.py b/config_orch_core/controller/message_bus_controller.py
index a2c0531..ce99ffe 100644
--- a/config_orch_core/controller/message_bus_controller.py
+++ b/config_orch_core/controller/message_bus_controller.py
@@ -1,11 +1,11 @@
 import json
-import logging
 from threading import Event
 
 from config_orch_core.config import Configuration
 from config_orch_core.dd_client import DDclient
 from config_orch_core.service.vnf_service import VnfService
 
+import logging
 
 class MessageBusController():
 
@@ -91,11 +91,16 @@ class MessageBusController():
         try:
             if self.vnfService.is_vnf_started(tenant_id, graph_id, vnf_id):
                 address = self.vnfService.get_management_address(tenant_id, graph_id, vnf_id)
-                if address is None:
-                    self.vnfService.save_management_address(tenant_id, graph_id, vnf_id, msg)
-                    logging.debug("Saved management address: " + msg + " of: " + tenant_id+'.'+graph_id+'.'+vnf_id )
+#                if address is None:
+#                    self.vnfService.save_management_address(tenant_id, graph_id, vnf_id, msg)
+#                    logging.debug("Saved management address: " + msg + " of: " + tenant_id+'.'+graph_id+'.'+vnf_id )
+                self.vnfService.save_management_address(tenant_id, graph_id, vnf_id, msg)
+                logging.debug("Saved management address: " + msg + " of: " + tenant_id+'.'+graph_id+'.'+vnf_id )
             else:
                 logging.error("Recevied a management address from a vnf not known:")
                 logging.error("Address: " + topic[1] + " From: tenant_id: " + tenant_id + ", graph_id: " + graph_id + ", vnf_id: " + vnf_id)
+        except Exception as err:
+            print(err)
+            logging.error(err)
         except IOError as err:
-            logging.error(err)
\ No newline at end of file
+            logging.error(err)
diff --git a/config_orch_core/repository/datadisk_repo.py b/config_orch_core/repository/datadisk_repo.py
index 8dd09d2..642a74d 100644
--- a/config_orch_core/repository/datadisk_repo.py
+++ b/config_orch_core/repository/datadisk_repo.py
@@ -7,7 +7,7 @@ local_db_path = "local_database"
 class DatadiskRepo():
 
     def get_file_list(self, functional_capability):
-        supported_functional_capabilities = ['nat', 'firewall', 'dhcp']
+        supported_functional_capabilities = ['nat', 'firewall', 'dhcp', 'transcoder']
         if functional_capability not in supported_functional_capabilities:
             raise FunctionalCapabilityNotFound("Functional capability " + functional_capability + " unsupported")
         else:
@@ -21,9 +21,11 @@ class DatadiskRepo():
 
 
     def get_initial_configuration_path(self, tenant_id, graph_id, vnf_id):
+#        return local_db_path+'/metadata/nat_initial_config.json'
         raise FileNotFound("initial_configuration.json not found for: " + tenant_id +'/'+ graph_id +'/'+ vnf_id)
 
     def get_template_path(self, tenant_id, graph_id, vnf_id):
+#        return local_db_path+'/metadata/nat_template.json'
         raise FileNotFound("templates.json not found for: " + tenant_id + '/' + graph_id + '/' + vnf_id)
 
     def get_metadata_path(self, tenant_id, graph_id, vnf_id, broker_address):
@@ -35,7 +37,7 @@ class DatadiskRepo():
         file.write('"tenant-id": "' + tenant_id + '",\n')
         file.write('"graph-id": "' + graph_id + '",\n')
         file.write('"vnf-id": "' + vnf_id + '",\n')
-        file.write('"broker-url": "tcp://10.0.0.2:5555"')
+        file.write('"broker-url": "tcp://192.168.40.1:5555"')
         #file.write('"broker-url: "' + broker_address)
         file.write("}")
 
@@ -57,6 +59,9 @@ class DatadiskRepo():
 
         elif (functional_capability == "nat"):
             return local_db_path+"/initial_configuration/NAT_initial_configuration.json"
+
+        elif (functional_capability == "transcoder"):
+            return local_db_path+"/initial_configuration/TRANSCODER_initial_configuration.json"
         else:
             raise FunctionalCapabilityNotFound("Functional capability " + functional_capability + " unknown")
 
@@ -70,5 +75,8 @@ class DatadiskRepo():
 
         elif (functional_capability == "nat"):
             return local_db_path+"/templates/NAT_template.json"
+
+        elif (functional_capability == "transcoder"):
+            return local_db_path+"/templates/TRANSCODER_template.json"
         else:
-            raise FunctionalCapabilityNotFound("Functional capability " + functional_capability + " unknown")
\ No newline at end of file
+            raise FunctionalCapabilityNotFound("Functional capability " + functional_capability + " unknown")
diff --git a/config_orch_core/repository/vnf_repo.py b/config_orch_core/repository/vnf_repo.py
index a240314..52ff085 100644
--- a/config_orch_core/repository/vnf_repo.py
+++ b/config_orch_core/repository/vnf_repo.py
@@ -1,6 +1,6 @@
 from config_orch_core.model.vnf import VNF
 import fileinput
-
+import logging
 database = "my_db.txt"
 
 class VnfRepo():
@@ -49,11 +49,17 @@ class VnfRepo():
 
     def save_management_address(self, vnf, address):
         try:
+            old_management = self.get_management_address(vnf)
             for line in fileinput.input(database, inplace=1):
-                old_row = vnf.tenant_id+':'+vnf.graph_id+':'+vnf.vnf_id
+                if ( old_management is None ):
+                    old_row = vnf.tenant_id+':'+vnf.graph_id+':'+vnf.vnf_id
+                else:
+                    old_row = vnf.tenant_id+':'+vnf.graph_id+':'+vnf.vnf_id+'#'+old_management
                 new_row = vnf.tenant_id+':'+vnf.graph_id+':'+vnf.vnf_id+'#'+address
                 print(line.replace(old_row, new_row))
-        except Exception:
+        except Exception as e:
+            logging.error("Error during update of management address")
+            logging.error(e)
             raise Exception
 
     def get_management_address(self, vnf):
diff --git a/config_orch_core/rest_api/resources/config.py b/config_orch_core/rest_api/resources/config.py
index f1dd47f..50e15bc 100644
--- a/config_orch_core/rest_api/resources/config.py
+++ b/config_orch_core/rest_api/resources/config.py
@@ -61,6 +61,7 @@ class Configuration(Resource):
             url = ''
         mainController = MainController()
         try:
+            logging.debug("Dati %s/%s/%s : %s" % (tenant_id,graph_id,vnf_id,request.data.decode()))
             return mainController.put_config(tenant_id, graph_id, vnf_id, url, request.data.decode())
 
         except VnfNotStarted as err:
@@ -86,6 +87,7 @@ class FileByFunctionalCapability(Resource):
                 return Response(json_data, status=200, mimetype="application/json")
             else:
                 filepath = mainController.retrieve_file_default(functional_capability, filename)
+                print(filepath)
                 return send_from_directory('', filepath)
 
         except FunctionalCapabilityNotFound as err:
@@ -104,11 +106,14 @@ class FileByTriple(Resource):
         mainController = MainController()
         try:
             filepath = mainController.retrieve_file(tenant_id, graph_id, vnf_id, filename)
+            logging.debug("Request: %s/%s/%s/%s -> %s" % ( tenant_id, graph_id, vnf_id, filename , filepath) )
             return send_from_directory('', filepath)
 
         except FileNotFound as err:
+            logging.error(err)
             return Response(json.dumps(err.get_mess()), status=404, mimetype="application/json")
         except Exception as err:
+            logging.error(err)
             return Response(json.dumps(str(err)), status=500, mimetype="application/json")
 
 
diff --git a/config_orch_core/service/configuration_service.py b/config_orch_core/service/configuration_service.py
index 2f9f822..b1d9e71 100644
--- a/config_orch_core/service/configuration_service.py
+++ b/config_orch_core/service/configuration_service.py
@@ -18,6 +18,7 @@ class ConfigurationService():
     def post(self, url, data):
         headers = {'Content-type': 'application/json'}
         try:
+            logging.debug("Invio a %s questi dati %s" %(url,data))
             resp = requests.post(url, data=data, headers=headers)
             resp.raise_for_status()
             return resp.text
@@ -29,6 +30,7 @@ class ConfigurationService():
     def put(self, url, data):
         headers = {'Content-type': 'application/json'}
         try:
+            logging.debug("Invio a %s questi dati %s" %(url,data))
             resp = requests.put(url, data=data, headers=headers)
             resp.raise_for_status()
             return resp.text
@@ -46,4 +48,4 @@ class ConfigurationService():
         except HTTPError as err:
             raise err
         except Exception as ex:
-            raise ex
\ No newline at end of file
+            raise ex
diff --git a/config_orch_core/service/datadisk_service.py b/config_orch_core/service/datadisk_service.py
index 5f162ec..8e85ead 100644
--- a/config_orch_core/service/datadisk_service.py
+++ b/config_orch_core/service/datadisk_service.py
@@ -2,6 +2,7 @@ from config_orch_core.config import Configuration
 from config_orch_core.repository.datadisk_repo import DatadiskRepo
 from config_orch_core.exception.file_not_found import FileNotFound
 from config_orch_core.exception.functional_capability_not_found import FunctionalCapabilityNotFound
+import logging
 
 class DatadiskService():
 
@@ -34,6 +35,7 @@ class DatadiskService():
                 raise FileNotFound("File: " + filename + " not found")
 
         except FileNotFound as err:
+            logging.error("Errore %s" % err)
             raise err
 
     def get_file_default(self, functional_capability, filename):
@@ -49,4 +51,5 @@ class DatadiskService():
                 raise FileNotFound("File: " + filename + " not found")
 
         except FunctionalCapabilityNotFound as err:
-            raise err
\ No newline at end of file
+            logging.error("Errore %s" % err)
+            raise err
diff --git a/local_database/initial_configuration/NAT_initial_configuration.json b/local_database/initial_configuration/NAT_initial_configuration.json
index c470bb9..a474424 100644
--- a/local_database/initial_configuration/NAT_initial_configuration.json
+++ b/local_database/initial_configuration/NAT_initial_configuration.json
@@ -1,38 +1,40 @@
 {
 	"config-nat:interfaces": {
-		"ifEntry": [
-			{
-				"id": "L2Port:0",
+		"ifEntry": [{
+				"id": "WAN:0",
 				"name": "eth0",
 				"type": "L3",
-				"management": true,
 				"ipv4_configuration": {
-					"configurationType": "static",
-					"address": "10.0.0.100"
-				}
+					"configurationType": "dhcp"
+				},
+				"management": false
 			},
 			{
-				"id": "L2Port:1",
+				"id": "LAN:1",
 				"name": "eth1",
 				"type": "L3",
 				"ipv4_configuration": {
-					"configurationType": "static",
-					"address": "192.168.0.1"
-				}
+					"netmask": "255.255.255.0",
+					"address": "192.168.10.1",
+					"mac_address": "02:01:02:03:04:05",
+					"configurationType": "static"
+				},
+				"management": false
 			},
 			{
-				"id": "L2Port:2",
+				"id": "management:2",
 				"name": "eth2",
 				"type": "L3",
 				"ipv4_configuration": {
 					"configurationType": "dhcp"
-				}
+				},
+				"management": true
 			}
 		]
 	},
 	"config-nat:nat": {
-		"private-interface": "L2Port:1",
-		"public-interface": "L2Port:2",
+		"public-interface": "WAN:0",
+		"private-interface": "LAN:1",
 		"floatingIP": []
 	}
 }
diff --git a/local_database/templates/NAT_template.json b/local_database/templates/NAT_template.json
index f25309e..5c177f6 100644
--- a/local_database/templates/NAT_template.json
+++ b/local_database/templates/NAT_template.json
@@ -1,40 +1,49 @@
 {
-  "CPUrequirements": {
-    "platformType": "x86",
-    "socket": [
-      {
-        "coreNumbers": 1
-      }
-    ]
-  },
-  
-  "name": "configurable_nat",
-  "functional-capability": "nat_docker",
-  "memory-size": 2048,
-  "vnf-type": "docker",
-  "uri-yang": "http://130.192.225.179:8081/yang/nat_cfg/",
-  "ports": [
-    {
-      "name": "eth",
-      "min": "1",
-      "label": "management",
-      "ipv4-config": "none",
-      "position": "0-0",
-      "ipv6-config": "none"
+    "CPUrequirements": {
+        "platformType": "x86",
+        "socket": [
+            {
+                "coreNumbers": 1
+            }
+        ]
     },
-    {
-      "name": "eth",
-      "min": "1",
-      "label": "L2Port",
-      "ipv4-config": "none",
-      "position": "1-10",
-      "ipv6-config": "none"
-    }
-  ],
-  "uri-image-type": "docker-registry",
-  "swap-disk-size": 0,
-  "expandable": false,
-  "ephemeral-file-system-size": 0,
-  "root-file-system-size": 40,
-  "uri-image": "nat_config"
+    "name": "nat",
+    "functional-capability": "nat",
+    "memory-size": 512,
+    "vnf-type": "virtual-machine-kvm",
+    "uri-image": "http://selforch.name29.net:8081/v2/nf_image/nat",
+    "uri-image-type":"remote-file",
+    "ports": [
+        {
+            "name": "eth",
+            "min": "1",
+            "label": "management",
+            "ipv4-config": "dhcp",
+            "position": "2-2",
+            "technology": "vhost",
+            "ipv6-config": "none"
+        },
+        {
+            "name": "eth",
+            "min": "1",
+            "label": "User",
+            "ipv4-config": "static",
+            "position": "1-1",
+            "technology": "vhost",
+            "ipv6-config": "none"
+        },
+        {
+            "name": "eth",
+            "min": "1",
+            "label": "WAN",
+            "ipv4-config": "dhcp",
+            "position": "0-0",
+            "technology": "vhost",
+            "ipv6-config": "none"
+        }
+    ],
+    "swap-disk-size": 0,
+    "expandable": false,
+    "ephemeral-file-system-size": 0,
+    "root-file-system-size": 40
 }
diff --git a/local_database/tenant-keys.json b/local_database/tenant-keys.json
index 4890b69..a42959b 100644
--- a/local_database/tenant-keys.json
+++ b/local_database/tenant-keys.json
@@ -1,7 +1,7 @@
 {
-    "hash": "0289930e584807661b5b35157972cb447cfdbe98cb2da8e1991dfaf0fb962727",
-    "publicpubkey": "DnLZtAhN4JMucaSeuHuvVh3gMSKiuEcYweo4wr3dRGk=",
-    "ddpubkey": "fgR9xeKZT5HZAbwtvLR8858gRuITL06BA4yv1+YKKR4=",
-    "privkey": "/3P77s24Q2CWEIni1w91qi+nWA2GT8zPyntjeWEDSCY=",
-    "pubkey": "AomTDlhIB2YbWzUVeXLLRHz9vpjLLajhmR368PuWJyc="
-}
+    "publicpubkey": "aCbUXU7y473XF1w6sktgnVDpGNRukue0KtmQaEL+EWQ=",
+    "hash": "ebaf78884c78effbf8a097d0a7f792c836e340adf0c6d442bb8e4de8c7a9d94d",
+    "pubkey": "6694iEx47/v4oJfQp/eSyDbjQK3wxtRCu45N6Mep2U0=",
+    "ddpubkey": "SpbAzS7V1yln0fQZT1a5PlzbraDRY0IRJ5AgBTcDVVs=",
+    "privkey": "/eivLDH1tLvNySdm8kGF8PnBxTtwxEeQEv6q7BDb9Ks="
+}
\ No newline at end of file
diff --git a/my_db.txt b/my_db.txt
new file mode 100644
index 0000000..e69de29
diff --git a/public-keys.json b/public-keys.json
new file mode 100644
index 0000000..154b12e
--- /dev/null
+++ b/public-keys.json
@@ -0,0 +1,10 @@
+{
+    "public": {
+        "name": "public",
+        "publicpubkey": "R8pwc1iWtua6QNjfOxkSSTu7WtBGPdBJUQJAXnWPFmE=",
+        "ddpubkey": "8u2Rj2UnvxG/+8iB3eZK9IIktWIQbZTQnXRXgvWAn3s=",
+        "privkey": "ukeliv4kcxl7zUAYHunlr058asnZfAeD4CHxHJcya6I=",
+        "pubkey": "R8pwc1iWtua6QNjfOxkSSTu7WtBGPdBJUQJAXnWPFmE=",
+        "hash": "47ca70735896b6e6ba40d8df3b1912493bbb5ad0463dd0495102405e758f1661"
+    }
+}
\ No newline at end of file
diff --git a/start.sh b/start.sh
index 7f88ee8..db325b3 100755
--- a/start.sh
+++ b/start.sh
@@ -1,3 +1,3 @@
 #!/bin/bash
 
-sudo python3 start_gunicorn.py
\ No newline at end of file
+sudo python3 start_gunicorn.py
